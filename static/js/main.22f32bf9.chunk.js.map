{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","onSearchChange","event","targe","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIaA,EAAQ,SAACC,GAAD,OACjB,sBAAKC,UAAU,iBAAf,UACA,qBACIC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACJ,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,aCJbC,G,MAAW,SAAAR,GAAK,OAC7B,qBAAKC,UAAU,YAAf,SACUD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,WCJlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAU,SACTa,KAAK,SACLF,YAAaA,EACbG,SAAWF,MC6CLG,G,wDA/Cb,aAAe,IAAD,8BACZ,gBAYFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAd1B,EAiBdC,eAAiB,SAAAC,GACf,EAAKL,SAAS,CAAEC,YAAaI,EAAMC,MAAMH,SAfzC,EAAKI,MAAQ,CACXhB,SAAU,GACVU,YAAa,IALH,E,qDAqBZ,WAAqB,IAAD,OAClBO,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAET,SAAWqB,S,oBAI9C,WAAW,IAAD,EAC0BC,KAAKN,MAA/BhB,EADA,EACAA,SAAUU,EADV,EACUA,YACZa,EAAmBvB,EAASwB,QAAO,SAAA7B,GAAO,OAC9CA,EAAQE,KAAK4B,cAAcC,SAAShB,EAAYe,kBAEhD,OACE,sBAAKjC,UAAU,MAAf,UACI,oDACA,cAAC,EAAD,CACMqB,eAAgBS,KAAKT,eACrBV,YAAY,kBACZC,aAAckB,KAAKlB,eAEzB,cAAC,EAAD,CAAUJ,SAAYuB,W,GA1ChBI,IAAMC,YCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.22f32bf9.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.style.css';\n\nexport const Card =  (props) => (\n    <div className='card-container'>\n    <img \n        alt=\"monster\" \n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n       <h2> {props.monster.name} </h2>\n       <p> {props.monster.email}</p>\n    </div>\n);\n\n","import React from 'react';\n\nimport { Card } from '../card/card.component'\nimport './card-list.style.css';\n\n\nexport const CardList = props =>(\n<div className='card-list'>\n         {props.monsters.map(monster => (\n            <Card key={monster.id} monster = {monster} />\n          ))}\n       \n</div>\n);\n\n","import React from 'react';\n\nimport './search-box.style.css'\n\n\nexport const SearchBox = ( {placeholder, handleChange }) => (\n    <input\n        className='search' \n         type='search'\n         placeholder={placeholder}\n         onChange= {handleChange}\n         />\n); ","import React from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\n\nimport { SearchBox } from './components/search-box/search-box.component'\n\nimport './App.css';\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }; \n\n    //this.handleChange = this.handleChange.bind(this);\n\n    //what is \"\".bind\" ? is a method on any function that returns a new function where the context of this is set to whatever we passed to it and the context of this that we're setting in\n  }\n\n  handleChange = e => {  // New ES6 Class Method\n    this.setState({ searchField: e.target.value})   // << this is a Arrow Function  \n  }\n\n  onSearchChange = event => {\n    this.setState({ searchField: event.targe.value})\n  }\n \n    componentDidMount() {\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters : users}))\n    }\n\n\n  render () {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n      return (\n        <div className='App'>\n            <h1> Monsters Rolodex </h1>\n            <SearchBox \n                  onSearchChange={this.onSearchChange}\n                  placeholder='search monsters'\n                  handleChange={this.handleChange}\n                  />\n            <CardList monsters = {filteredMonsters} />\n        </div>\n      );\n      }\n    }\n   \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}